
onst { QuickDB } = require("quick.db")
const db = new QuickDB()

client.on("interactionCreate", async(interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === "formulario") {
      if (!interaction.guild.channels.cache.get(await db.get(`canal_logs_${interaction.guild.id}`))) return interaction.reply({ content: `O sistema está desativado.`, ephemeral: true })
      const modal = new Discord.ModalBuilder()
      .setCustomId("modal")
      .setTitle("Formulário");

      const pergunta1 = new Discord.TextInputBuilder()
      .setCustomId("pergunta1") // Coloque o ID da pergunta
      .setLabel("Qual e seu nome/sobrenome?") // Coloque a pergunta
      .setMaxLength(20) // Máximo de caracteres para a resposta
      .setPlaceholder("Nome/Sobrenome") // Mensagem que fica antes de escrever a resposta
      .setRequired(true) // Deixar para responder obrigatório (true | false)
      .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)

      const pergunta2 = new Discord.TextInputBuilder()
      .setCustomId("pergunta2") // Coloque o ID da pergunta
      .setLabel("Qual e sua idade?") // Coloque a pergunta
      .setMaxLength(2) // Máximo de caracteres para a resposta
      .setPlaceholder("Idade") // Mensagem que fica antes de escrever a resposta
      .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)
      .setRequired(true)

      const pergunta3 = new Discord.TextInputBuilder()
      .setCustomId("pergunta3") // Coloque o ID da pergunta
      .setLabel("Qual e seu horario disponivel?") // Coloque a pergunta
      .setPlaceholder("Manhã/Tarde/Noite/Madrugada") // Mensagem que fica antes de escrever a resposta
      .setStyle(Discord.TextInputStyle.Short) // Tipo de resposta (Short | Paragraph)
      .setRequired(true)

      const pergunta4 = new Discord.TextInputBuilder()
      .setCustomId("pergunta4") // Coloque o ID da pergunta
      .setLabel("Porque devemos te aceitar na STAFF?") // Coloque a pergunta
      .setMaxLength(1000)
      .setPlaceholder("Motivo") // Mensagem que fica antes de escrever a resposta
      .setStyle(Discord.TextInputStyle.Paragraph) // Tipo de resposta (Short | Paragraph)
      .setRequired(true)


      modal.addComponents(
        new Discord.ActionRowBuilder().addComponents(pergunta1),
        new Discord.ActionRowBuilder().addComponents(pergunta2),
        new Discord.ActionRowBuilder().addComponents(pergunta3),
        new Discord.ActionRowBuilder().addComponents(pergunta4)

      )

      await interaction.showModal(modal)
    }
  } else if (interaction.isModalSubmit()) {
    if (interaction.customId === "modal") {
      let resposta1 = interaction.fields.getTextInputValue("pergunta1")
      let resposta2 = interaction.fields.getTextInputValue("pergunta2")
      let resposta3 = interaction.fields.getTextInputValue("pergunta3")
      let resposta4 = interaction.fields.getTextInputValue("pergunta4")


      if (!resposta1) resposta1 = "Não informado."
      if (!resposta2) resposta2 = "Não informado."
      if (!resposta3) resposta3 = "Não informado."
      if (!resposta4) resposta4 = "Não informado."


      let embed = new Discord.EmbedBuilder()
      .setColor("303136")
      .setAuthor({ name: interaction.guild.name, iconURL: interaction.guild.iconURL({ dynamic: true }) })
      .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
      .setDescription(`**Usuario:** ${interaction.user}\n**ID:** \`${interaction.user.id}\``)
      .addFields(
        {
          name: `Nome`,
          value: `\`\`\`${resposta1}\`\`\``,
          inline: true
        },
        {
          name: `Idade`,
          value: `\`\`\`${resposta2}\`\`\``,
          inline: true
        },
        {
          name: `Horarios`,
          value: `\`\`\`${resposta3}\`\`\``,
          inline: true
        },
        {
          name: `Motivo`,
          value: `\`\`\`${resposta4}\`\`\``,
          inline: false
        }
      );

      interaction.reply({ embeds: [ new Discord.EmbedBuilder().setDescription(`**${interaction.user},** Seu formulário foi enviado com sucesso. Aguarde a resposta no seu privado!`)
                .setColor("303136")
        ],
        ephemeral: true,
    })
      await interaction.guild.channels.cache.get(await db.get(`canal_logs_${interaction.guild.id}`)).send({ embeds: [embed] })
    }
  }
})
